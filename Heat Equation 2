#include <iostream>
#include <cmath>
using std::cout;
using std::endl;
int main()
{
    // Solving for u (temperature)
    const int plate_length = 20;
    const int max_time = 3;
    const double alpha = 2.0;
    const double delta_x = 1.0;
    const double delta_t = (delta_x * delta_x) / (4.0 * alpha);
    const double gamma = (alpha * delta_t) / (delta_x * delta_x);

    // Initialize u array
    double u[max_time][plate_length][plate_length];

    // Initial values
    const double u_initial = 0.0;
    const double u_top = 100.0;
    const double u_left = 0.0;
    const double u_bottom = 0.0;
    const double u_right = 0.0;

    // Set initial values of u
    for (int i = 0; i < plate_length; ++i)
    {
        for (int j = 0; j < plate_length; ++j)
        {
            u[0][i][j] = u_initial;
            if (i == 0)
                    u[0][i][j] = u_bottom;

            if (i == plate_length - 1)
                u[0][i][j] = u_top;

            if (j == 0)
                u[0][i][j] = u_left;

            if (j == plate_length - 1)
                u[0][i][j] = u_right;

            cout << "  " << u[0][i][j];
        }
        cout << endl;
    }

    // Solve the heat equation
    for (int k = 1; k < max_time; ++k)
    {
        cout << "Time: " << k << endl;
        for (int i = 1; i < plate_length - 1; ++i)
        {
            for (int j = 1; j < plate_length - 1; ++j)
            {
                u[k][i][j] = u[k - 1][i][j] + gamma * (u[k - 1][i + 1][j] - 2 * u[k - 1][i][j] + u[k - 1][i - 1][j]) +
                             gamma * (u[k - 1][i][j + 1] - 2 * u[k - 1][i][j] + u[k - 1][i][j - 1]);

                cout << "  " << u[k][i][j];
            }
            cout << endl;
        }
    }

    return 0;
}
